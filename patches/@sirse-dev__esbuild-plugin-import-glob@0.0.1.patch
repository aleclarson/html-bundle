diff --git a/dist/client.d.ts b/dist/client.d.ts
index 92041b6139b89b62a34583138142330a96cefd57..757c7400af330fefed8074a1bbb6876a8a29e16f 100644
--- a/dist/client.d.ts
+++ b/dist/client.d.ts
@@ -2,14 +2,13 @@ interface ImportMeta {
 	glob: ImportGlobFunction;
 }
 
-type ImportGlobOptions<TEager extends boolean> = {
-	eager?: TEager;
+type ImportGlobOptions = {
+	eager?: boolean;
 	import?: string;
 };
 
 interface ImportGlobFunction {
-	<TEager extends boolean = false>(
-		pattern: string | string[],
-		options?: ImportGlobOptions<TEager>,
-	): TEager extends true ? Record<string, unknown> : Record<string, () => Promise<unknown>>;
+	<T>(pattern: string | string[], options?: ImportGlobOptions & { eager: undefined }): Record<string, () => Promise<T>>;
+	<T>(pattern: string | string[], options?: ImportGlobOptions & { eager: true }): Record<string, T>;
+	(pattern: string | string[], options?: ImportGlobOptions): Record<string, any>;
 }
diff --git a/dist/index.js b/dist/index.mjs
similarity index 66%
rename from dist/index.js
rename to dist/index.mjs
index 78da29b71f48cceadf55bc12e26ac7f48e9d9467..4728f8b86411e3746d99a129f5e53ce9acc6318b 100644
--- a/dist/index.js
+++ b/dist/index.mjs
@@ -1,40 +1,13 @@
-var __create = Object.create;
 var __defProp = Object.defineProperty;
-var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
-var __getOwnPropNames = Object.getOwnPropertyNames;
-var __getProtoOf = Object.getPrototypeOf;
-var __hasOwnProp = Object.prototype.hasOwnProperty;
 var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
-var __export = (target, all) => {
-  for (var name in all)
-    __defProp(target, name, { get: all[name], enumerable: true });
-};
-var __copyProps = (to, from, except, desc) => {
-  if (from && typeof from === "object" || typeof from === "function") {
-    for (let key of __getOwnPropNames(from))
-      if (!__hasOwnProp.call(to, key) && key !== except)
-        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
-  }
-  return to;
-};
-var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
-  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
-  mod
-));
-var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
 
 // src/index.ts
-var src_exports = {};
-__export(src_exports, {
-  default: () => src_default
-});
-module.exports = __toCommonJS(src_exports);
-var import_promises = require("fs/promises");
+import { readFile } from "fs/promises";
 
 // src/transformGlob.ts
-var import_path2 = require("path");
-var import_core2 = require("@babel/core");
-var import_fast_glob = __toESM(require("fast-glob"));
+import { dirname as dirname2 } from "path";
+import { transformAsync, types as types2 } from "@babel/core";
+import glob from "fast-glob";
 
 // src/CodeError.ts
 var CodeError = class extends Error {
@@ -92,36 +65,36 @@ var extractGlobArguments = /* @__PURE__ */ __name((nodePath) => {
 }, "extractGlobArguments");
 
 // src/normalizeFiles.ts
-var import_path = require("path");
+import { normalize, join, dirname } from "path";
 var normalizeFiles = /* @__PURE__ */ __name((files, current) => {
-  const normalizedFiles = files.map(import_path.normalize).filter((file) => (0, import_path.normalize)((0, import_path.join)((0, import_path.dirname)(current), file)) !== (0, import_path.normalize)(current));
+  const normalizedFiles = files.map(normalize).filter((file) => normalize(join(dirname(current), file)) !== normalize(current));
   return normalizedFiles.map((file) => (/^[./\\]/.test(file) ? file : `./${file}`).replace(/\\/g, "/"));
 }, "normalizeFiles");
 
 // src/replaceImportGlobNode.ts
-var import_core = require("@babel/core");
-var createEagerIdentifier = /* @__PURE__ */ __name((globIndex, pathIndex) => import_core.types.identifier(`__glob_${globIndex}_${pathIndex}`), "createEagerIdentifier");
+import { types } from "@babel/core";
+var createEagerIdentifier = /* @__PURE__ */ __name((globIndex, pathIndex) => types.identifier(`__glob_${globIndex}_${pathIndex}`), "createEagerIdentifier");
 var createValue = /* @__PURE__ */ __name((globIndex, path, pathIndex, options) => {
   if (options.eager) {
     return createEagerIdentifier(globIndex, pathIndex);
   }
-  const importExpression = import_core.types.callExpression(import_core.types.import(), [import_core.types.stringLiteral(path)]);
+  const importExpression = types.callExpression(types.import(), [types.stringLiteral(path)]);
   if (!options.import) {
-    return import_core.types.arrowFunctionExpression([], importExpression);
+    return types.arrowFunctionExpression([], importExpression);
   }
-  return import_core.types.arrowFunctionExpression(
+  return types.arrowFunctionExpression(
     [],
-    import_core.types.callExpression(import_core.types.memberExpression(importExpression, import_core.types.identifier("then")), [
-      import_core.types.arrowFunctionExpression(
-        [import_core.types.identifier("m")],
-        import_core.types.memberExpression(import_core.types.identifier("m"), import_core.types.identifier(options.import))
+    types.callExpression(types.memberExpression(importExpression, types.identifier("then")), [
+      types.arrowFunctionExpression(
+        [types.identifier("m")],
+        types.memberExpression(types.identifier("m"), types.identifier(options.import))
       )
     ])
   );
 }, "createValue");
 var generateImportStatement = /* @__PURE__ */ __name((globIndex, path, pathIndex, options) => {
-  const imported = options.import === void 0 ? import_core.types.importNamespaceSpecifier(createEagerIdentifier(globIndex, pathIndex)) : import_core.types.importSpecifier(createEagerIdentifier(globIndex, pathIndex), import_core.types.identifier(options.import));
-  return import_core.types.importDeclaration([imported], import_core.types.stringLiteral(path));
+  const imported = options.import === void 0 ? types.importNamespaceSpecifier(createEagerIdentifier(globIndex, pathIndex)) : types.importSpecifier(createEagerIdentifier(globIndex, pathIndex), types.identifier(options.import));
+  return types.importDeclaration([imported], types.stringLiteral(path));
 }, "generateImportStatement");
 var generateImports = /* @__PURE__ */ __name((nodePath, globIndex, paths, options) => {
   const root = nodePath.findParent((path) => path.isProgram());
@@ -134,9 +107,9 @@ var generateImports = /* @__PURE__ */ __name((nodePath, globIndex, paths, option
   root.unshiftContainer("body", importStatements);
 }, "generateImports");
 var replaceImportGlobNode = /* @__PURE__ */ __name((nodePath, globIndex, paths, options) => {
-  const replacement = import_core.types.objectExpression(
+  const replacement = types.objectExpression(
     paths.map(
-      (path, pathIndex) => import_core.types.objectProperty(import_core.types.stringLiteral(path), createValue(globIndex, path, pathIndex, options))
+      (path, pathIndex) => types.objectProperty(types.stringLiteral(path), createValue(globIndex, path, pathIndex, options))
     )
   );
   nodePath.replaceWith(replacement);
@@ -154,11 +127,11 @@ function babelPluginGlobTransformation(api) {
     },
     visitor: {
       CallExpression: (nodePath, state) => {
-        if (import_core2.types.isMemberExpression(nodePath.node.callee) && import_core2.types.isMetaProperty(nodePath.node.callee.object) && import_core2.types.isIdentifier(nodePath.node.callee.property, { name: "glob" })) {
+        if (types2.isMemberExpression(nodePath.node.callee) && types2.isMetaProperty(nodePath.node.callee.object) && types2.isIdentifier(nodePath.node.callee.property, { name: "glob" })) {
           const { patterns, options } = extractGlobArguments(nodePath);
           const files = normalizeFiles(
-            import_fast_glob.default.sync(patterns, {
-              cwd: (0, import_path2.dirname)(state.opts.path),
+            glob.sync(patterns, {
+              cwd: dirname2(state.opts.path),
               fs: state.opts.fs
             }),
             state.opts.path
@@ -186,7 +159,7 @@ var transformGlob = /* @__PURE__ */ __name(async (source, config) => {
     plugins.push("jsx");
   }
   try {
-    const babelOutput = await (0, import_core2.transformAsync)(source, {
+    const babelOutput = await transformAsync(source, {
       parserOpts: {
         sourceType: "module",
         plugins
@@ -245,7 +218,7 @@ var defaultPluginOptions = {
 };
 var setBuilderLoader = /* @__PURE__ */ __name((build, filter, loader, config) => {
   build.onLoad({ filter }, async (parameters) => {
-    const contentBuffer = await (0, import_promises.readFile)(parameters.path);
+    const contentBuffer = await readFile(parameters.path);
     const content = contentBuffer.toString();
     const output = await transformGlob(content, {
       ...config,
@@ -270,5 +243,6 @@ var createPlugin = /* @__PURE__ */ __name((options) => {
   };
 }, "createPlugin");
 var src_default = createPlugin;
-// Annotate the CommonJS export names for ESM import in node:
-0 && (module.exports = {});
+export {
+  src_default as default
+};
diff --git a/dist/index.js.map b/dist/index.mjs.map
similarity index 65%
rename from dist/index.js.map
rename to dist/index.mjs.map
index 1d41eb3358b4bdded38df327c1c83212f6059ded..476d707aad3023980f9e13e53a1d68a1e015e232 100644
--- a/dist/index.js.map
+++ b/dist/index.mjs.map
@@ -2,6 +2,6 @@
   "version": 3,
   "sources": ["../src/index.ts", "../src/transformGlob.ts", "../src/CodeError.ts", "../src/ImportGlobOptions.ts", "../src/extractGlobArguments.ts", "../src/normalizeFiles.ts", "../src/replaceImportGlobNode.ts"],
   "sourcesContent": ["import { readFile } from 'fs/promises';\nimport { TransformConfig, transformGlob } from './transformGlob';\nimport type { Loader, Plugin, PluginBuild } from 'esbuild';\n\nexport type PluginOptions = {\n\tjsFileRe: RegExp;\n\tjsxFileRe: RegExp;\n\ttsFileRe: RegExp;\n\ttsxFileRe: RegExp;\n};\n\nconst defaultPluginOptions: PluginOptions = {\n\ttsFileRe: /\\.ts$/,\n\ttsxFileRe: /\\.tsx$/,\n\tjsFileRe: /\\.js$/,\n\tjsxFileRe: /\\.jsx$/,\n};\n\nconst setBuilderLoader = (\n\tbuild: PluginBuild,\n\tfilter: RegExp,\n\tloader: Loader,\n\tconfig: Omit<TransformConfig, 'path'>,\n) => {\n\tbuild.onLoad({ filter }, async (parameters) => {\n\t\tconst contentBuffer = await readFile(parameters.path);\n\t\tconst content = contentBuffer.toString();\n\n\t\tconst output = await transformGlob(content, {\n\t\t\t...config,\n\t\t\tpath: parameters.path,\n\t\t});\n\n\t\treturn {\n\t\t\t...output,\n\t\t\tloader,\n\t\t};\n\t});\n};\n\nconst createPlugin = (options?: Partial<PluginOptions>): Plugin => {\n\tconst { jsFileRe, jsxFileRe, tsFileRe, tsxFileRe } = Object.assign(options ?? {}, defaultPluginOptions);\n\treturn {\n\t\tname: 'esbuild-plugin-import-glob',\n\t\tsetup(build) {\n\t\t\tsetBuilderLoader(build, jsFileRe, 'js', { ts: false, jsx: false });\n\t\t\tsetBuilderLoader(build, jsxFileRe, 'jsx', { ts: false, jsx: true });\n\t\t\tsetBuilderLoader(build, tsFileRe, 'ts', { ts: true, jsx: false });\n\t\t\tsetBuilderLoader(build, tsxFileRe, 'tsx', { ts: true, jsx: true });\n\t\t},\n\t};\n};\n\nexport default createPlugin;\n", "import { dirname } from 'path';\nimport { transformAsync, ParserOptions, types, ConfigAPI, PluginObj } from '@babel/core';\nimport { OnLoadResult } from 'esbuild';\nimport glob, { type FileSystemAdapter } from 'fast-glob';\nimport { CodeError } from './CodeError';\nimport { extractGlobArguments } from './extractGlobArguments';\nimport { normalizeFiles } from './normalizeFiles';\nimport { replaceImportGlobNode } from './replaceImportGlobNode';\n\nexport type TransformConfig = {\n\tpath: string;\n\tts?: boolean;\n\tjsx?: boolean;\n\tfs?: FileSystemAdapter;\n};\n\ntype BabelPluginState = {\n\tcounter: number;\n\topts: TransformConfig;\n};\n\nfunction babelPluginGlobTransformation(api: ConfigAPI): PluginObj<BabelPluginState> {\n\tapi.assertVersion(7);\n\n\treturn {\n\t\tpre() {\n\t\t\tthis.counter = 0;\n\t\t},\n\t\tvisitor: {\n\t\t\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\t\t\tCallExpression: (nodePath, state) => {\n\t\t\t\tif (\n\t\t\t\t\ttypes.isMemberExpression(nodePath.node.callee) &&\n\t\t\t\t\ttypes.isMetaProperty(nodePath.node.callee.object) &&\n\t\t\t\t\ttypes.isIdentifier(nodePath.node.callee.property, { name: 'glob' })\n\t\t\t\t) {\n\t\t\t\t\tconst { patterns, options } = extractGlobArguments(nodePath);\n\n\t\t\t\t\tconst files = normalizeFiles(\n\t\t\t\t\t\tglob.sync(patterns, {\n\t\t\t\t\t\t\tcwd: dirname(state.opts.path),\n\t\t\t\t\t\t\tfs: state.opts.fs,\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tstate.opts.path,\n\t\t\t\t\t);\n\n\t\t\t\t\treplaceImportGlobNode(nodePath, state.counter, files, options);\n\t\t\t\t\t++state.counter;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t};\n}\n\nconst getLine = (source: string, line: number) => source.split('\\n')[line - 1];\n\nexport const transformGlob = async (source: string, config: TransformConfig): Promise<OnLoadResult> => {\n\tif (!/import\\.meta\\.glob\\(/.test(source)) {\n\t\treturn {\n\t\t\tcontents: source,\n\t\t};\n\t}\n\n\tconst plugins: ParserOptions['plugins'] = [];\n\n\tif (config.ts) {\n\t\tplugins.push('typescript');\n\t}\n\n\tif (config.jsx) {\n\t\tplugins.push('jsx');\n\t}\n\n\ttry {\n\t\tconst babelOutput = await transformAsync(source, {\n\t\t\tparserOpts: {\n\t\t\t\tsourceType: 'module',\n\t\t\t\tplugins,\n\t\t\t},\n\t\t\tplugins: [[babelPluginGlobTransformation, config]],\n\t\t});\n\n\t\tif (!babelOutput?.code) {\n\t\t\tthrow new Error('Failed to transform file via babel.');\n\t\t}\n\n\t\treturn {\n\t\t\tcontents: babelOutput.code,\n\t\t};\n\t} catch (error) {\n\t\tif (error instanceof CodeError && error.nodePath.node.loc) {\n\t\t\tconst location = error.nodePath.node.loc;\n\t\t\treturn {\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlocation: {\n\t\t\t\t\t\t\tcolumn: location.start.column,\n\t\t\t\t\t\t\tline: location.start.line,\n\t\t\t\t\t\t\tlineText: getLine(source, location.start.line),\n\t\t\t\t\t\t\tfile: config.path,\n\t\t\t\t\t\t\tlength:\n\t\t\t\t\t\t\t\tlocation.end.line === location.start.line\n\t\t\t\t\t\t\t\t\t? location.end.column - location.start.column\n\t\t\t\t\t\t\t\t\t: 1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttext: error.message,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\tif (error instanceof Error) {\n\t\t\treturn {\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\ttext: error.message,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\terrors: [\n\t\t\t\t{\n\t\t\t\t\ttext: 'Unknown error occurred.',\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t}\n};\n", "import { NodePath, Node } from '@babel/core';\n\nexport class CodeError extends Error {\n\tpublic constructor(message: string, public readonly nodePath: NodePath<Node>) {\n\t\tsuper(message);\n\t}\n}\n", "export type ImportGlobOptions = {\n\teager?: boolean;\n\timport?: string;\n};\n\nexport const isImportGlobOptions = (value: unknown): value is ImportGlobOptions =>\n\ttypeof value === 'object' &&\n\tvalue !== null &&\n\tObject.entries(value).every(([key, value]) => {\n\t\tif (!['import', 'eager'].includes(key)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (key === 'import' && typeof value !== 'string' && value !== undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (key === 'eager' && typeof value !== 'boolean' && value !== undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t});\n", "import { NodePath, Node, types } from '@babel/core';\nimport { CodeError } from './CodeError';\nimport { ImportGlobOptions, isImportGlobOptions } from './ImportGlobOptions';\n\nconst evaluateConfidently = (nodePath: NodePath<Node>, argumentName: string): unknown => {\n\tconst evaluation = nodePath.evaluate();\n\n\tif (!evaluation.confident) {\n\t\tthrow new CodeError(`${argumentName} should be known at compile time.`, nodePath);\n\t}\n\n\treturn evaluation.value;\n};\n\nconst isArrayOfElements = <T>(value: unknown, predicate: (value: unknown) => value is T): value is T[] =>\n\tArray.isArray(value) && value.every(predicate);\n\nexport const extractGlobArguments = (nodePath: NodePath<types.CallExpression>) => {\n\tconst globArguments = nodePath.get('arguments');\n\tconst globPatterns = evaluateConfidently(globArguments[0], 'import.meta.glob first argument');\n\n\tif (\n\t\ttypeof globPatterns !== 'string' &&\n\t\t!isArrayOfElements(globPatterns, (value): value is string => typeof value === 'string')\n\t) {\n\t\tthrow new CodeError(\n\t\t\t'import.meta.glob first argument should be a string or array of strings.',\n\t\t\tglobArguments[0],\n\t\t);\n\t}\n\n\tlet globOptions: ImportGlobOptions = {};\n\n\tif (globArguments[1]) {\n\t\tconst receivedOptions = evaluateConfidently(globArguments[1], 'import.meta.glob second argument');\n\n\t\tif (!isImportGlobOptions(receivedOptions)) {\n\t\t\tthrow new CodeError(\n\t\t\t\t'import.meta.glob second argument should be an object of type `ImportGlobOptions`',\n\t\t\t\tglobArguments[1],\n\t\t\t);\n\t\t}\n\n\t\tglobOptions = receivedOptions;\n\t}\n\n\treturn { patterns: globPatterns, options: globOptions };\n};\n", "import { normalize, join, dirname } from 'path';\r\n\r\nexport const normalizeFiles = (files: string[], current: string): string[] => {\r\n\tconst normalizedFiles = files\r\n\t\t.map(normalize)\r\n\t\t.filter((file) => normalize(join(dirname(current), file)) !== normalize(current));\r\n\r\n\treturn normalizedFiles.map((file) => (/^[./\\\\]/.test(file) ? file : `./${file}`).replace(/\\\\/g, '/'));\r\n};\r\n", "import { NodePath, types } from '@babel/core';\nimport { ImportGlobOptions } from './ImportGlobOptions';\n\nconst createEagerIdentifier = (globIndex: number, pathIndex: number) =>\n\ttypes.identifier(`__glob_${globIndex}_${pathIndex}`);\n\nconst createValue = (globIndex: number, path: string, pathIndex: number, options: ImportGlobOptions) => {\n\tif (options.eager) {\n\t\treturn createEagerIdentifier(globIndex, pathIndex);\n\t}\n\n\tconst importExpression = types.callExpression(types.import(), [types.stringLiteral(path)]);\n\n\tif (!options.import) {\n\t\treturn types.arrowFunctionExpression([], importExpression);\n\t}\n\n\treturn types.arrowFunctionExpression(\n\t\t[],\n\t\ttypes.callExpression(types.memberExpression(importExpression, types.identifier('then')), [\n\t\t\ttypes.arrowFunctionExpression(\n\t\t\t\t[types.identifier('m')],\n\t\t\t\ttypes.memberExpression(types.identifier('m'), types.identifier(options.import)),\n\t\t\t),\n\t\t]),\n\t);\n};\n\nconst generateImportStatement = (globIndex: number, path: string, pathIndex: number, options: ImportGlobOptions) => {\n\tconst imported =\n\t\toptions.import === undefined\n\t\t\t? types.importNamespaceSpecifier(createEagerIdentifier(globIndex, pathIndex))\n\t\t\t: types.importSpecifier(createEagerIdentifier(globIndex, pathIndex), types.identifier(options.import));\n\n\treturn types.importDeclaration([imported], types.stringLiteral(path));\n};\n\nconst generateImports = (\n\tnodePath: NodePath<types.CallExpression>,\n\tglobIndex: number,\n\tpaths: string[],\n\toptions: ImportGlobOptions,\n) => {\n\tconst root = nodePath.findParent((path) => path.isProgram());\n\n\tif (root === null) {\n\t\tthrow new Error('Cannot find program root.');\n\t}\n\n\tconst importStatements = paths.map((path, pathIndex) =>\n\t\tgenerateImportStatement(globIndex, path, pathIndex, options),\n\t);\n\n\t(root as NodePath<types.Program>).unshiftContainer('body', importStatements);\n};\n\nexport const replaceImportGlobNode = (\n\tnodePath: NodePath<types.CallExpression>,\n\tglobIndex: number,\n\tpaths: string[],\n\toptions: ImportGlobOptions,\n): void => {\n\tconst replacement = types.objectExpression(\n\t\tpaths.map((path, pathIndex) =>\n\t\t\ttypes.objectProperty(types.stringLiteral(path), createValue(globIndex, path, pathIndex, options)),\n\t\t),\n\t);\n\n\tnodePath.replaceWith(replacement);\n\n\tif (options.eager) {\n\t\tgenerateImports(nodePath, globIndex, paths, options);\n\t}\n};\n"],
-  "mappings": "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",
-  "names": ["import_path", "import_core", "value", "glob"]
+  "mappings": "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",
+  "names": ["dirname", "types", "value", "types", "dirname"]
 }
diff --git a/package.json b/package.json
index e15d29d06f196da7399665fca586f19b17af79fa..3ef6e5387848938d23d592ab9e7bfde7948a0eb9 100644
--- a/package.json
+++ b/package.json
@@ -1,21 +1,45 @@
 {
-  "name": "@sirse-dev/esbuild-plugin-import-glob",
-  "version": "0.0.1",
-  "description": "ESBuild plugin to support import.meta.glob imports",
-  "main": "./dist/index.js",
-  "types": "./dist/index.d.ts",
-  "publishConfig": {
-    "access": "public",
-    "directory": "prepublish"
-  },
-  "keywords": [
-    "esbuild"
-  ],
-  "author": "sirse",
-  "license": "MIT",
-  "dependencies": {
-    "@babel/core": "^7.18.13",
-    "fast-glob": "^3.2.11"
-  },
-  "scripts": {}
+	"name": "@sirse-dev/esbuild-plugin-import-glob",
+	"version": "0.0.1",
+	"description": "ESBuild plugin to support import.meta.glob imports",
+	"main": "./dist/index.mjs",
+	"types": "./dist/index.d.ts",
+	"publishConfig": {
+		"access": "public",
+		"directory": "prepublish"
+	},
+	"scripts": {
+		"build": "aqu build && cp ./src/client.d.ts ./dist/",
+		"dev": "aqu watch",
+		"test": "aqu test",
+		"lint": "eslint .",
+		"lint:fix": "pnpm lint --fix",
+		"pipeline": "pnpm build && pnpm lint && pnpm test",
+		"prepublishOnly": "pnpm pipeline && rm -rf ./prepublish && clean-publish",
+		"postpublish": "rm -rf ./prepublish"
+	},
+	"keywords": [
+		"esbuild"
+	],
+	"author": "sirse",
+	"license": "MIT",
+	"devDependencies": {
+		"@changesets/cli": "^2.25.0",
+		"@sirse-dev/eslint-config": "^1.0.12",
+		"@types/babel__code-frame": "^7.0.3",
+		"@types/babel__core": "^7.1.19",
+		"@types/jest": "^28.1.8",
+		"@types/node": "16.11.7",
+		"aqu": "^0.3.2",
+		"clean-publish": "^4.0.1",
+		"esbuild": "^0.15.5",
+		"eslint": "^8.22.0",
+		"memfs": "^3.4.7",
+		"prettier": "^2.7.1",
+		"typescript": "^4.7.4"
+	},
+	"dependencies": {
+		"@babel/core": "^7.18.13",
+		"fast-glob": "^3.2.11"
+	}
 }
\ No newline at end of file